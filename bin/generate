#!/usr/bin/env php
<?php

require __DIR__.'/../vendor/autoload.php';

use MyShoppress\DevOp\ConfTemplate\InputParser;
use MyShoppress\DevOp\ConfTemplate\OutputHandler;
use MyShoppress\DevOp\ConfTemplate\Renderer;
use MyShoppress\DevOp\ConfTemplate\TemplateFiles;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\SingleCommandApplication;
use Symfony\Component\Console\Style\SymfonyStyle;

(new SingleCommandApplication)
    ->setName('Generate')
    ->addArgument("values", InputArgument::IS_ARRAY,"Key value pairs in format of KEY=VALUE. These values will overwrite ENV or values from input file", null)
    ->addOption('template-file','f',InputOption::VALUE_REQUIRED,'HandleBar or Mustache template file. This option can be omitted if template is provided in STDIN')
    ->addOption('input-file','i',InputOption::VALUE_OPTIONAL,'Input file')
    ->addOption('input-section','s',InputOption::VALUE_OPTIONAL,'Only use the values in input file at section <SECTION>')
    ->addOption('output','o', InputOption::VALUE_OPTIONAL,'Output file. If none given it will output to stdout. If a directory is given. The file name will be guessed from the input file name. If 0 given it will use the directory of the template file')
    ->addOption('clean-env','c',InputOption::VALUE_NONE,'By default ENV values are passed to the template engine. Using this flag will not use the ENV values')
    ->setCode(function(InputInterface  $input, OutputInterface  $output ){

        $parser = new InputParser();
        $envVars = $input->getOption('clean-env')  ? [] : $_SERVER;
        $parser
            ->addValues($envVars)
            ->addKeyValuePairs($input->getArgument('values'))
        ;
        if ( $input->getOption('input-file') ) {
            $file = $input->getOption('input-file');
            if ( $input->getOption('input-section' )) {
                $file .= '?'.$input->getOption('input-section' );
            }
            $parser->addInputFile($file);
        }
        $values = $parser->getValues();
        $templateFile = $input->getOption('template-file');
        $template = TemplateFiles::createTemplate([$templateFile]);
        $renderer = new Renderer();
        $data = $renderer->render($template, $values);
        $outputFile = $input->getOption('output');
        if ( empty($outputFile) ) {
            $outputFile = 'php://stdout';
        }
        elseif ( is_dir($outputFile) || $outputFile === '1' ) {
            $outputDirectory = $outputFile === '1' ? dirname($templateFile) : $outputFile;
            $name = pathinfo($templateFile, PATHINFO_FILENAME);
            $outputFile = $outputDirectory."/".$name;
        }
        OutputHandler::output($outputFile, $data);
    })
    ->run();